# -*- coding: utf-8 -*-
"""13 assignment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s5402HTRCoV4h1S46qsnXcRsPSTc8wh_
"""

#1solution

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def create_new_linked_list(list1, list2):
    if not list1 or not list2:
        return None

    head = None
    current = None

    while list1 and list2:
        if list1.value >= list2.value:
            new_node = Node(list1.value)
            list1 = list1.next
        else:
            new_node = Node(list2.value)
            list2 = list2.next

        if not head:
            head = new_node
            current = head
        else:
            current.next = new_node
            current = current.next

    remaining = list1 if list1 else list2

    while remaining:
        new_node = Node(remaining.value)
        current.next = new_node
        current = current.next
        remaining = remaining.next

    return head

#2 solution

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def removeDuplicates(head):
    if head is None or head.next is None:
        return head

    current = head
    while current and current.next:
        if current.value == current.next.value:
            current.next = current.next.next
        else:
            current = current.next

    return head

# 3 solution

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def reverseKNodes(head, k):
    if head is None or k <= 1:
        return head

    current = head
    prev = None
    next = None
    count = 0

    while current and count < k:
        next = current.next
        current.next = prev
        prev = current
        current = next
        count += 1

    if next:
        head.next = reverseKNodes(next, k)

    return prev if count == k else head

#4solution

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def reverseAlternateKNodes(head, k):
    if head is None or k <= 1:
        return head

    current = head
    prev = None
    next = None
    count = 0
    skip = False

    while current:
        if count < k and not skip:
            next = current.next
            current.next = prev
            prev = current
            current = next
            count += 1
        else:
            skip = not skip
            current = current.next
            count += 1

        if count == k:
            if skip:
                prev.next = reverseAlternateKNodes(current, k)
            else:
                head.next = reverseAlternateKNodes(current, k)
                return prev

    return prev if skip else head

#5solution

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def deleteLastOccurrence(head, key):
    if head is None:
        return None

    prev = None
    current = head
    last = None

    while current:
        if current.value == key:
            last = current
        prev = current
        current = current.next

    if last is None:
        return head

    if last == head:
        head = head.next
    else:
        prev.next = last.next

    return head

#6solution

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

def mergeSortedLists(head1, head2):
    if head1 is None:
        return head2
    if head2 is None:
        return head1

    if head1.value <= head2.value:
        new_head = head1
        head1 = head1.next
    else:
        new_head = head2
        head2 = head2.next

    current = new_head

    while head1 and head2:
        if head1.value <= head2.value:
            current.next = head1
            head1 = head1.next
        else:
            current.next = head2
            head2 = head2.next
        current = current.next

    if head1:
        current.next = head1
    if head2:
        current.next = head2

    return new_head

